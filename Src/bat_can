/****************************************************************************
* Title                    :   Battery Pack MCU
* File name                :   main.c
* Author name[ID]          :   Abhinav Choudhary
* Origin Date(DD/MM/YYYY)  :   14/11/2019 
* Version                  :   2.0.0
* Compiler                 :   Keil IDE
* Hardware                 :   Refer to documentation
* Target                   :   STM32F446 Nucleo
* Notes                    :   CAN Bus network design
* Copy-Rights
*/

/**
 *  @file  bat_can.c
 *  @brief CAN Communication with conversion kit MCU
 */

/*******************************************************************************
*Includes
*******************************************************************************/
#include "bat_can.h"
#include "bat_soc.h"

/*******************************************************************************
*Module Preprocessor Constants
*******************************************************************************/


/*******************************************************************************
*Module Preprocessor Macros
*******************************************************************************/


/*******************************************************************************
*Module Typedefs
*******************************************************************************/


/*******************************************************************************
*Module Variable Definitions
*******************************************************************************/
CAN_HandleTypeDef hcan1;
CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;

extern uint32_t CAN_BaseID;

uint32_t offset =0;
uint8_t DataLen = 0;
uint32_t TxMailbox;

extern GaugeData1_t can_msg_1;
extern GaugeData2_t can_msg_2;
extern GaugeData3_t can_msg_3;
extern uint8_t TxMsg[7] ;

/*******************************************************************************
*Function Definitions
*******************************************************************************/
extern void Error_Handler(void);

/**
  * @brief <A description of functions purpose>
  * @version <version number example V0.0>
  * @param[in] <variable1> <description of variable 1>
  * @param[in] <variable2>  <description of variable 2>
  * @return int8_t  
  * @todo <what remains to be done>
  * @see <link for documentation(use char array for weblinks)>
  */
/**
  * @brief CAN MSP Initialization
  * This function configures the hardware resources for CAN1 peripheral
  * @param hcan1: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan1)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan1->Instance==CAN1)
  {
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    
    /* Enable Interrupt vector */
    //HAL_NVIC_SetPriority(CAN1_TX_IRQn,15,0);
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn,15,0);
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn,15,0);

    //HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
  }
}



/**
  * @brief CAN MSP De-Initialization
  * This function freeze the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan1)
{
  if(hcan1->Instance==CAN1)
  {
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
  
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
  }
}

/**
  * @brief Initialize CAN peripheral
    This function configures and initializes the CAN1 peripheral
  * @param None
  * @retval None
  */
 void CAN1_Init(void) 
{  
  hcan1.Instance                   = CAN1;
  hcan1.Init.AutoBusOff            = DISABLE;
  hcan1.Init.AutoRetransmission    = ENABLE;
  hcan1.Init.AutoWakeUp            = DISABLE;
  hcan1.Init.Mode                  = CAN_MODE_NORMAL;
  hcan1.Init.ReceiveFifoLocked     = DISABLE;
  /* For 8Mhz APB1 clock speed */
  hcan1.Init.Prescaler             = 1;
  hcan1.Init.SyncJumpWidth         = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1              = CAN_BS1_13TQ;
  hcan1.Init.TimeSeg2              = CAN_BS2_2TQ;
  
  hcan1.Init.TimeTriggeredMode     = DISABLE;
  hcan1.Init.TransmitFifoPriority  = DISABLE;
  if ( HAL_CAN_Init (&hcan1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CAN1_Filter_Config
    This function configures CAN1 filter banks
  * @param None
  * @retval None
  */
void CAN1_Filter_Config (void)
{

  CAN_FilterTypeDef CAN1_Filter_Init;
  CAN1_Filter_Init.FilterActivation     = ENABLE;          /* Enableo(or)Disable Filtering */
  CAN1_Filter_Init.FilterBank           = 0;               /* FilterBank:0 */
  CAN1_Filter_Init.FilterFIFOAssignment = CAN_RX_FIFO0;
  CAN1_Filter_Init.FilterIdHigh         = 0x0000;
  CAN1_Filter_Init.FilterIdLow          = 0x1F42;
  CAN1_Filter_Init.FilterMaskIdHigh     = 0xFFFF;
  CAN1_Filter_Init.FilterMaskIdLow      = 0xFFFA;
  CAN1_Filter_Init.FilterMode           = CAN_FILTERMODE_IDMASK;
  CAN1_Filter_Init.FilterScale          = CAN_FILTERSCALE_32BIT;
  if (HAL_CAN_ConfigFilter(&hcan1,&CAN1_Filter_Init) != HAL_OK)
  {
    Error_Handler();
  }


  CAN_FilterTypeDef CAN11_Filter_Init;
  CAN11_Filter_Init.FilterActivation    = ENABLE;
  CAN11_Filter_Init.FilterBank          = 1;
  CAN11_Filter_Init.FilterFIFOAssignment= CAN_RX_FIFO0;
  CAN11_Filter_Init.FilterIdHigh        = 0x0000;
  CAN11_Filter_Init.FilterIdLow         = 0x1F52;
  CAN11_Filter_Init.FilterMaskIdHigh    = 0xFFFF;
  CAN11_Filter_Init.FilterMaskIdLow     = 0xFFFA;
  CAN11_Filter_Init.FilterMode          = CAN_FILTERMODE_IDMASK;
  CAN11_Filter_Init.FilterScale         = CAN_FILTERSCALE_32BIT;
  if (HAL_CAN_ConfigFilter(&hcan1,&CAN11_Filter_Init) != HAL_OK)
  {
    Error_Handler();
  }

#if 0
  CAN_FilterTypeDef CAN1_Filter_Init;
  CAN1_Filter_Init.FilterActivation     = ENABLE;          /* Enableo(or)Disable Filtering */
  CAN1_Filter_Init.FilterBank           = 0;               /* FilterBank:0 */
  CAN1_Filter_Init.FilterFIFOAssignment = CAN_RX_FIFO0;
  CAN1_Filter_Init.FilterIdHigh         = 0x0000;
  CAN1_Filter_Init.FilterIdLow          = 0x0;
  CAN1_Filter_Init.FilterMaskIdHigh     = 0x0;
  CAN1_Filter_Init.FilterMaskIdLow      = 0x2;
  CAN1_Filter_Init.FilterMode           = CAN_FILTERMODE_IDMASK;
  CAN1_Filter_Init.FilterScale          = CAN_FILTERSCALE_32BIT;
  if (HAL_CAN_ConfigFilter(&hcan1,&CAN1_Filter_Init) != HAL_OK)
  {
    Error_Handler();
  }
#endif
}

/**
  * @brief Tx CAN1 message
    This function transmits CAN1 messages
  * @param None
  * @retval None
  */
void CAN1_MsgTx (uint8_t *pTxMsg)
{
  TxHeader.DLC   = DataLen;//sizeof(pTxMsg);
   
  /* Uncomment the required ext.id */
  TxHeader.ExtId = CAN_BaseID + offset;
  TxHeader.IDE   = CAN_ID_EXT;
  TxHeader.RTR   = CAN_RTR_DATA;

  if (HAL_CAN_AddTxMessage(&hcan1,&TxHeader,pTxMsg,&TxMailbox) != HAL_OK)
  {
    Error_Handler();
  }  
}

/**
  * @brief  CAN Msg transmit- CAN Base ID for battery pack
  * This function sends unique CAN Base ID to the battery pack
  * @param  ID : unique CAN Base ID for the battery pack
  * @retval None  
  */
void SEND_CAN_BaseId (uint32_t ID)
{
  TxHeader.DLC   = sizeof(ID);
  TxHeader.ExtId = 0x3E9; /* DEC:1001 */
  TxHeader.IDE   = CAN_ID_EXT;
  TxHeader.RTR   = CAN_RTR_DATA;
  
  if (HAL_CAN_AddTxMessage(&hcan1,&TxHeader,(uint8_t*)&ID,&TxMailbox) != HAL_OK)
  {
    Error_Handler();
  } 
}

/**
  * @brief  CAN  Rx Fifo message pending callback (ISR)
  * This function handles the CAN message from Kit MCU
  * @param  hcan : CAN handle structure
  * @retval None  
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
  uint8_t rcvd_msg[8];

  if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK)
  {
    Error_Handler();
  }
  
  /** @ToDo - send id as data with same data */
  if (RxHeader.ExtId==0x3E8 && RxHeader.RTR == 1)
  {
    SEND_CAN_BaseId(CAN_BaseID);
  }

  
  if (RxHeader.ExtId==0x3EA && RxHeader.RTR == 1) 
  {

    /*           read SoC and send Data             */
    /** Get SoC parameter into @pGauge_Param_t */
    if (Read_Gauge_Param() != 0)
    {
      Error_Handler();
    }
    /* Format CAN data frames and send data*/
    offset = 1;
    DataLen = 7;
    CAN1_MsgTx((uint8_t*)&can_msg_1); // Transmit high priority message 
    DataLen = 4;

    offset=2;
    CAN1_MsgTx((uint8_t*)&can_msg_2);  // Transmit medium priority message  
    DataLen = 6;

    offset=3;
    CAN1_MsgTx((uint8_t*)&can_msg_3);  // Transmit low priority message
  }
}

/**
  * @brief  CAN Rx FIFO message pending IRQ Handler
  * @param  None
  * @retval None  
  */
void CAN1_RX0_IRQHandler(void)
{
  HAL_CAN_IRQHandler(&hcan1);

}

/**
  * @brief  CAN SCE interrupt handler
  * @param  None
  * @retval None  
  */
void CAN1_SCE_IRQHandler(void)
{
  HAL_CAN_IRQHandler(&hcan1);
}



/*****************************END OF FILE**************************************/
