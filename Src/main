/****************************************************************************
* Title                    :   Battery Pack MCU
* File name                :   main.c
* Author name[ID]          :   Abhinav Choudhary
* Origin Date(DD/MM/YYYY)  :   14/11/2019 
* Version                  :   2.0.0
* Compiler                 :   Keil IDE
* Hardware                 :   Refer to documentation
* Target                   :   STM32F446 Nucleo
* Notes                    :   CAN Bus network design
* Copy-Rights
*/

/**
 *  @file   main.c
 *  @brief  Transmit and receive battery related data over 
 *  https://racenergy-my.sharepoint.com/:o:/g/personal/arun_racenergy_in/Eud3FMX6WVJHgy-9c1GvzFwBjLZt9qCDfjesyMfFlzGLKQ?e=S6Fnzt
 */

/*******************************************************************************
*Includes
*******************************************************************************/
#include "main.h"


/*******************************************************************************
*Module Preprocessor Constants
*******************************************************************************/


/*******************************************************************************
*Module Preprocessor Macros
*******************************************************************************/


/*******************************************************************************
*Module Typedefs
*******************************************************************************/


/*******************************************************************************
*Module Variable Definitions
*******************************************************************************/
extern Gauge_Param_t *pGauge_Param;
extern CAN_HandleTypeDef hcan1;

/*******************************************************************************
*Function Definitions
*******************************************************************************/
void SystemClock_Config(void);

/**
  * @brief <A description of functions purpose>
  * @version <version number example V0.0>
  * @param[in] <variable1> <description of variable 1>
  * @param[in] <variable2>  <description of variable 2>
  * @return int8_t  
  * @todo <what remains to be done>
  * @see <link for documentation(use char array for weblinks)>
  */

int main(void)
{
  /* Reset of all peripherals, Initializes the Flash interface and the
     Systick. */
  HAL_Init();
  /* Configure the system clock */
  SystemClock_Config();
  /* Initialize all configured peripherals */
  Gauge_I2C_Init();                 /* Initialize I2C1 peripheral */ 
  CAN_GetBaseID();
  
  CAN1_Init();                      /* Initialize CAN1 peripheral */
  /* Configure CAN1 Rx filter bank */
  CAN1_Filter_Config();
  
  /* Interrupt on Tx mailbox is empty (or) atleast 1 Rx message pending (or)
     BusOFF */
  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY |
                                         CAN_IT_RX_FIFO0_MSG_PENDING |
                                         CAN_IT_BUSOFF) != HAL_OK)
  {
    Error_Handler();
  }
	
  /* Leave CAN initalization mode and enter into Normal operation mode */
  if( HAL_CAN_Start(&hcan1) != HAL_OK)
  {
    Error_Handler();
  }

  while(1)
  {

  }
  //return 0;
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  while(1);
}

void SysTick_Handler (void)
{
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
}




/*****************************END OF FILE**************************************/
